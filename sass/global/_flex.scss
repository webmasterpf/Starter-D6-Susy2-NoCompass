//	https://github.com/mastastealth/sass-flex-mixin
//
//	======== Flexbox Mixins ==============
//	------------------------
//	Copyright (c) 2013 Brian Franco
//
//	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//	------------------------
//
//	This is a set of mixins for those who want to mess
//	around with flexbox using the native support of current
//	browsers. For full support table check: http://caniuse.com/flexbox
//
//	Basically this will use:
//		Fallback, old syntax (IE10, Safari, mobile webkit browsers)
//		Prefixed standard syntax (Chrome)
//		Final standards syntax (FF, Opera 12.1)
//
//	------------------------
//	This was inspired by:
//		http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
//	With help from:
//		http://www.w3.org/TR/css3-flexbox/
//		http://the-echoplex.net/flexyboxes/
//		http://msdn.microsoft.com/en-us/library/ie/hh772069%28v=vs.85%29.aspx
// Compass experimental utilities was inspired by:
//		https://gist.github.com/joseph-turner/5674311

@import "compass/css3/shared";


// Flexbox Inits
// display: flex | inline-flex

@mixin flexbox {
	@include experimental-value(display, box, -moz, -webkit, not -o, not -ms, not -khtml, not official);
    @include experimental-value(display, flex, -moz, -webkit, not -o, not -ms, not -khtml, official);
    @include experimental-value(display, flexbox, not -moz, not -webkit, not -o, -ms, not -khtml, not official);
}

@mixin inline-flex {
	@include experimental-value(display, inline-box, not -moz, -webkit, not -o, not -ms, not -khtml, not official);
	@include experimental-value(display, inline-flex, -moz, -webkit, not -o, not -ms, not -khtml, official);
	@include experimental-value(display, inline-flexbox, not -moz, not -webkit, not -o, -ms, not -khtml, not official);
}

// Flexbox Direction
// Values: row | row-reverse | column | column-reverse
// Default: row

@mixin flex-direction($value) {
	$direction-value: normal;
	$orient-value: horizontal;

	@if $value == "row-reverse" {
		$direction-value: reverse;
	} @else if $value == "column" {
		$orient-value: vertical;
	} @else if $value == "column-reverse" {
		$direction-value: reverse;
		$orient-value: vertical;
	}

	@include experimental(box-direction, $direction-value, not -moz, -webkit, not -o, not -ms, not -khtml, not official);
	@include experimental(box-orient, $orient-value, not -moz, -webkit, not -o, not -ms, not -khtml, not official);
	@include experimental(flex-direction, $value, -moz, -webkit, not -o, -ms, not -khtml, official);
}

// Shorter version
@mixin flex-dir($value) {
	@include flex-direction($value);
}

// Flexbox Wrap
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap

@mixin flex-wrap($value) {
	// No Webkit Box fallback
	$wrap-value: $value;

	@if $value == "nowrap" {
		$wrap-value: none;
	}

	@include experimental(flex-wrap, $wrap-value, not -moz, not -webkit, not -o, -ms, not -khtml, not official);
	@include experimental(flex-wrap, $value, -moz, -webkit, not -o, not -ms, not -khtml, official);
}

// Flexbox Flow (shorthand)
// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap

@mixin flex-flow($values) {
	// No Webkit Box fallback
	@include experimental(flex-flow, $values, -moz, -webkit, not -o, -ms, not -khtml, official);
}

// Flexbox Order
// Default: 0

@mixin order($int) {
	@include experimental(box-ordinal-group, $int, -moz, -webkit, not -o, not -ms, not -khtml, not official);
	@include experimental(flex-order, $int, not -moz, not -webkit, not -o, -ms, not -khtml, not official);
	@include experimental(order, $int, -moz, -webkit, not -o, -ms, not -khtml, official);
}

// Flexbox Grow
// Default: 0

@mixin flex-grow($int) {
	@include experimental(flex-grow, $int, -moz, -webkit, not -o, not -ms, not -khtml, official);
	@include experimental(flex-positive, $int, not -moz, not -webkit, not -o, -ms, not -khtml, not official);
}

// Flexbox Shrink
// Default: 1

@mixin flex-shrink($int) {
	@include experimental(flex-shrink, $int, -moz, -webkit, not -o, not -ms, not -khtml, official);
	@include experimental(flex-negative, $int, not -moz, not -webkit, not -o, -ms, not -khtml, not official);
}

// Flexbox Basis
// Values: Like "width"
// Default: auto

@mixin flex-basis($value) {
	@include experimental(flex-basis, $value, -moz, -webkit, not -o, not -ms, not -khtml, official);
	@include experimental(flex-preferred-size, $value, not -moz, not -webkit, not -o, -ms, not -khtml, not official);
}

// Flexbox "Flex" (shorthand)
// Values: <flex-grow> <flex-shrink> || <flex-basis>
// Default: 0 1 auto

@mixin flex($values, $flex-width: false) {
	@include experimental(box-flex, $values, -moz, -webkit, not -o, not -ms, not -khtml, not official);
	@include experimental(flex, $values, -moz, -webkit, not -o, -ms, not -khtml, official);
    @if $flex-width {
		width: $flex-width;
	}
}

// Flexbox Justify Content
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
// (space-* values not supported in older syntaxes)

@mixin justify-content($value) {
	$pack-value: $value;

	@if $value == "flex-start" {
		$pack-value: start;
	}
	@else if $value == "flex-end" {
		$pack-value: end
	}

	@include experimental(box-pack, $pack-value, not -moz, -webkit, not -o, not -ms, not -khtml, not official);
	@include experimental(flex-pack, $pack-value, not -moz, not -webkit, not -o, -ms, not -khtml, not official);
	@include experimental(justify-content, $value, -moz, -webkit, not -o, not -ms, not -khtml, official);
}

// Shorter version
@mixin flex-just($value) {
	@include justify-content($value);
}

// Flexbox Align Items
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch

@mixin align-items($value) {
	$align-value: $value;

	@if $value == "flex-start" {
		$align-value: start;
	}
	@else if $value == "flex-end" {
		$align-value: end;
	}

	@include experimental(box-align, $align-value, not -moz, -webkit, not -o, not -ms, not -khtml, not official);
	@include experimental(flex-align, $align-value, not -moz, not -webkit, not -o, -ms, not -khtml, not official);
	@include experimental(align-items, $value, -moz, -webkit, not -o, not -ms, not -khtml, official);
}

// Flexbox Align Self
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto

@mixin align-self($value) {
	// No Webkit Box Fallback
	$align-value: $value;

	@if $value == "flex-start" {
		$align-value: start;
	}
	@else if $value == "flex-end" {
		$align-value: end;
	}

	@include experimental(flex-item-align, $align-value, not -moz, not -webkit, not -o, -ms, not -khtml, not official);
	@include experimental(align-self, $value, -moz, -webkit, not -o, not -ms, not -khtml, official);
}

// Flexbox Align Content
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch

@mixin align-content($value) {
	// No Webkit Box Fallback
	$align-value: $value;

	@if $value == "flex-start" {
		$align-value: start;
	}
	@else if $value == "flex-end" {
		$align-value: end;
	}

	@include experimental(flex-line-pack, $align-value, not -moz, not -webkit, not -o, -ms, not -khtml, not official);
	@include experimental(align-content, $value, -moz, -webkit, not -o, not -ms, not -khtml, official);
}